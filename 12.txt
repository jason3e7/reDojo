
12:     file format elf32-i386


Disassembly of section .init:

08048294 <_init>:
 8048294:	push   ebx
 8048295:	sub    esp,0x8
 8048298:	call   8048320 <__x86.get_pc_thunk.bx>
 804829d:	add    ebx,0x1d63
 80482a3:	mov    eax,DWORD PTR [ebx-0x4]
 80482a9:	test   eax,eax
 80482ab:	je     80482b2 <_init+0x1e>
 80482ad:	call   80482d0 <__gmon_start__@plt>
 80482b2:	add    esp,0x8
 80482b5:	pop    ebx
 80482b6:	ret    

Disassembly of section .plt:

080482c0 <__gmon_start__@plt-0x10>:
 80482c0:	push   DWORD PTR ds:0x804a004
 80482c6:	jmp    DWORD PTR ds:0x804a008
 80482cc:	add    BYTE PTR [eax],al
	...

080482d0 <__gmon_start__@plt>:
 80482d0:	jmp    DWORD PTR ds:0x804a00c
 80482d6:	push   0x0
 80482db:	jmp    80482c0 <_init+0x2c>

080482e0 <__libc_start_main@plt>:
 80482e0:	jmp    DWORD PTR ds:0x804a010
 80482e6:	push   0x8
 80482eb:	jmp    80482c0 <_init+0x2c>

Disassembly of section .text:

080482f0 <_start>:
 80482f0:	xor    ebp,ebp
 80482f2:	pop    esi
 80482f3:	mov    ecx,esp
 80482f5:	and    esp,0xfffffff0
 80482f8:	push   eax
 80482f9:	push   esp
 80482fa:	push   edx
 80482fb:	push   0x8048480
 8048300:	push   0x8048410
 8048305:	push   ecx
 8048306:	push   esi
 8048307:	push   0x80483ed
 804830c:	call   80482e0 <__libc_start_main@plt>
 8048311:	hlt    
 8048312:	xchg   ax,ax
 8048314:	xchg   ax,ax
 8048316:	xchg   ax,ax
 8048318:	xchg   ax,ax
 804831a:	xchg   ax,ax
 804831c:	xchg   ax,ax
 804831e:	xchg   ax,ax

08048320 <__x86.get_pc_thunk.bx>:
 8048320:	mov    ebx,DWORD PTR [esp]
 8048323:	ret    
 8048324:	xchg   ax,ax
 8048326:	xchg   ax,ax
 8048328:	xchg   ax,ax
 804832a:	xchg   ax,ax
 804832c:	xchg   ax,ax
 804832e:	xchg   ax,ax

08048330 <deregister_tm_clones>:
 8048330:	mov    eax,0x804a01f
 8048335:	sub    eax,0x804a01c
 804833a:	cmp    eax,0x6
 804833d:	ja     8048340 <deregister_tm_clones+0x10>
 804833f:	ret    
 8048340:	mov    eax,0x0
 8048345:	test   eax,eax
 8048347:	je     804833f <deregister_tm_clones+0xf>
 8048349:	push   ebp
 804834a:	mov    ebp,esp
 804834c:	sub    esp,0x18
 804834f:	mov    DWORD PTR [esp],0x804a01c
 8048356:	call   eax
 8048358:	leave  
 8048359:	ret    
 804835a:	lea    esi,[esi+0x0]

08048360 <register_tm_clones>:
 8048360:	mov    eax,0x804a01c
 8048365:	sub    eax,0x804a01c
 804836a:	sar    eax,0x2
 804836d:	mov    edx,eax
 804836f:	shr    edx,0x1f
 8048372:	add    eax,edx
 8048374:	sar    eax,1
 8048376:	jne    8048379 <register_tm_clones+0x19>
 8048378:	ret    
 8048379:	mov    edx,0x0
 804837e:	test   edx,edx
 8048380:	je     8048378 <register_tm_clones+0x18>
 8048382:	push   ebp
 8048383:	mov    ebp,esp
 8048385:	sub    esp,0x18
 8048388:	mov    DWORD PTR [esp+0x4],eax
 804838c:	mov    DWORD PTR [esp],0x804a01c
 8048393:	call   edx
 8048395:	leave  
 8048396:	ret    
 8048397:	mov    esi,esi
 8048399:	lea    edi,[edi+eiz*1+0x0]

080483a0 <__do_global_dtors_aux>:
 80483a0:	cmp    BYTE PTR ds:0x804a01c,0x0
 80483a7:	jne    80483bc <__do_global_dtors_aux+0x1c>
 80483a9:	push   ebp
 80483aa:	mov    ebp,esp
 80483ac:	sub    esp,0x8
 80483af:	call   8048330 <deregister_tm_clones>
 80483b4:	mov    BYTE PTR ds:0x804a01c,0x1
 80483bb:	leave  
 80483bc:	repz ret 
 80483be:	xchg   ax,ax

080483c0 <frame_dummy>:
 80483c0:	mov    eax,ds:0x8049f10
 80483c5:	test   eax,eax
 80483c7:	je     80483e8 <frame_dummy+0x28>
 80483c9:	mov    eax,0x0
 80483ce:	test   eax,eax
 80483d0:	je     80483e8 <frame_dummy+0x28>
 80483d2:	push   ebp
 80483d3:	mov    ebp,esp
 80483d5:	sub    esp,0x18
 80483d8:	mov    DWORD PTR [esp],0x8049f10
 80483df:	call   eax
 80483e1:	leave  
 80483e2:	jmp    8048360 <register_tm_clones>
 80483e7:	nop
 80483e8:	jmp    8048360 <register_tm_clones>

080483ed <main>:
 80483ed:	push   ebp
 80483ee:	mov    ebp,esp
 80483f0:	sub    esp,0x4
 80483f3:	mov    DWORD PTR [ebp-0x4],0x0
 80483fa:	add    DWORD PTR [ebp-0x4],0x1
 80483fe:	cmp    DWORD PTR [ebp-0x4],0x63
 8048402:	jle    80483fa <main+0xd>
 8048404:	mov    eax,0x0
 8048409:	leave  
 804840a:	ret    
 804840b:	xchg   ax,ax
 804840d:	xchg   ax,ax
 804840f:	nop

08048410 <__libc_csu_init>:
 8048410:	push   ebp
 8048411:	push   edi
 8048412:	xor    edi,edi
 8048414:	push   esi
 8048415:	push   ebx
 8048416:	call   8048320 <__x86.get_pc_thunk.bx>
 804841b:	add    ebx,0x1be5
 8048421:	sub    esp,0x1c
 8048424:	mov    ebp,DWORD PTR [esp+0x30]
 8048428:	lea    esi,[ebx-0xf4]
 804842e:	call   8048294 <_init>
 8048433:	lea    eax,[ebx-0xf8]
 8048439:	sub    esi,eax
 804843b:	sar    esi,0x2
 804843e:	test   esi,esi
 8048440:	je     8048469 <__libc_csu_init+0x59>
 8048442:	lea    esi,[esi+0x0]
 8048448:	mov    eax,DWORD PTR [esp+0x38]
 804844c:	mov    DWORD PTR [esp],ebp
 804844f:	mov    DWORD PTR [esp+0x8],eax
 8048453:	mov    eax,DWORD PTR [esp+0x34]
 8048457:	mov    DWORD PTR [esp+0x4],eax
 804845b:	call   DWORD PTR [ebx+edi*4-0xf8]
 8048462:	add    edi,0x1
 8048465:	cmp    edi,esi
 8048467:	jne    8048448 <__libc_csu_init+0x38>
 8048469:	add    esp,0x1c
 804846c:	pop    ebx
 804846d:	pop    esi
 804846e:	pop    edi
 804846f:	pop    ebp
 8048470:	ret    
 8048471:	jmp    8048480 <__libc_csu_fini>
 8048473:	nop
 8048474:	nop
 8048475:	nop
 8048476:	nop
 8048477:	nop
 8048478:	nop
 8048479:	nop
 804847a:	nop
 804847b:	nop
 804847c:	nop
 804847d:	nop
 804847e:	nop
 804847f:	nop

08048480 <__libc_csu_fini>:
 8048480:	repz ret 

Disassembly of section .fini:

08048484 <_fini>:
 8048484:	push   ebx
 8048485:	sub    esp,0x8
 8048488:	call   8048320 <__x86.get_pc_thunk.bx>
 804848d:	add    ebx,0x1b73
 8048493:	add    esp,0x8
 8048496:	pop    ebx
 8048497:	ret    
